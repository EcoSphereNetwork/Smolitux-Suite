{"ast":null,"code":"import { vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"for\"];\nconst _hoisted_2 = [\"id\", \"disabled\"];\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"form-check\", [{\n      disabled: $props.disabled\n    }, $options.inlineClass]])\n  }, [_createElementVNode(\"label\", {\n    for: $data.cbId,\n    class: \"form-check-label\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    id: $data.cbId,\n    class: \"form-check-input\",\n    type: \"checkbox\",\n    disabled: $props.disabled,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $options.model = $event)\n  }, null, 8 /* PROPS */, _hoisted_2), [[_vModelCheckbox, $options.model]]), _cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n    class: \"form-check-sign\"\n  }, null, -1 /* HOISTED */)), _renderSlot(_ctx.$slots, \"default\", {}, () => [$props.inline ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Â \")) : _createCommentVNode(\"v-if\", true)])], 8 /* PROPS */, _hoisted_1)], 2 /* CLASS */);\n}","map":{"version":3,"names":["key","_createElementBlock","class","_normalizeClass","disabled","$props","$options","inlineClass","_createElementVNode","for","$data","cbId","id","type","_cache","$event","model","_hoisted_2","_renderSlot","_ctx","$slots","inline","_hoisted_3","_createCommentVNode","_hoisted_1"],"sources":["/workspace/Smolitux-Suite/src/components/BaseCheckbox.vue"],"sourcesContent":["<template>\n  <div class=\"form-check\" :class=\"[{ disabled: disabled }, inlineClass]\">\n    <label :for=\"cbId\" class=\"form-check-label\">\n      <input\n        :id=\"cbId\"\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        :disabled=\"disabled\"\n        v-model=\"model\"\n      />\n      <span class=\"form-check-sign\"></span>\n      <slot>\n        <span v-if=\"inline\">&nbsp;</span>\n      </slot>\n    </label>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\",\n  },\n  props: {\n    checked: {\n      type: [Array, Boolean],\n      description: \"Whether checkbox is checked\",\n    },\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\",\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox should be inline with other checkboxes\",\n    },\n  },\n  data() {\n    return {\n      cbId: \"\",\n      touched: false,\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n        this.$emit(\"input\", check);\n      },\n    },\n    inlineClass() {\n      return this.inline ? \"form-check-inline\" : \"\";\n    },\n  },\n  created() {\n    this.cbId = Math.random().toString(16).slice(2);\n  },\n};\n</script>\n"],"mappings":";mBAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAcM;IAdDC,KAAK,EADZC,eAAA,EACa,YAAY;MAAAC,QAAA,EAAsBC,MAAA,CAAAD;IAAQ,GAAIE,QAAA,CAAAC,WAAW;MAClEC,mBAAA,CAYQ;IAZAC,GAAG,EAAEC,KAAA,CAAAC,IAAI;IAAET,KAAK,EAAC;sBACvBM,mBAAA,CAME;IALCI,EAAE,EAAEF,KAAA,CAAAC,IAAI;IACTT,KAAK,EAAC,kBAAkB;IACxBW,IAAI,EAAC,UAAU;IACdT,QAAQ,EAAEC,MAAA,CAAAD,QAAQ;IAP3B,uBAAAU,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQiBT,QAAA,CAAAU,KAAK,GAAAD,MAAA;0BARtBE,UAAA,I,kBAQiBX,QAAA,CAAAU,KAAK,E,6BAEhBR,mBAAA,CAAqC;IAA/BN,KAAK,EAAC;EAAiB,6BAC7BgB,WAAA,CAEOC,IAAA,CAAAC,MAAA,iBAFP,MAEO,CADOf,MAAA,CAAAgB,MAAM,I,cAAlBpB,mBAAA,CAAiC,QAZzCqB,UAAA,EAY4B,GAAM,KAZlCC,mBAAA,e,mBAAAC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}