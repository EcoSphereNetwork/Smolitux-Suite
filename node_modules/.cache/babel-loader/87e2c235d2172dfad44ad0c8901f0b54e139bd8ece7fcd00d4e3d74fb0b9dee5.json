{"ast":null,"code":"import WebSocketService from '@/services/WebSocketService';\nconst state = {\n  nodes: [],\n  connections: [],\n  selectedNode: null,\n  isConnected: false,\n  error: null\n};\nconst mutations = {\n  SET_NODES(state, nodes) {\n    state.nodes = nodes;\n  },\n  ADD_NODE(state, node) {\n    state.nodes.push(node);\n  },\n  UPDATE_NODE(state, {\n    id,\n    updates\n  }) {\n    const node = state.nodes.find(n => n.id === id);\n    if (node) {\n      Object.assign(node, updates);\n    }\n  },\n  REMOVE_NODE(state, id) {\n    state.nodes = state.nodes.filter(n => n.id !== id);\n  },\n  SET_CONNECTIONS(state, connections) {\n    state.connections = connections;\n  },\n  ADD_CONNECTION(state, connection) {\n    state.connections.push(connection);\n  },\n  REMOVE_CONNECTION(state, {\n    fromId,\n    toId\n  }) {\n    state.connections = state.connections.filter(c => !(c.from.id === fromId && c.to.id === toId));\n  },\n  SET_SELECTED_NODE(state, node) {\n    state.selectedNode = node;\n  },\n  SET_CONNECTED(state, isConnected) {\n    state.isConnected = isConnected;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst actions = {\n  connect({\n    commit\n  }) {\n    WebSocketService.connect();\n    WebSocketService.on('connected', isConnected => {\n      commit('SET_CONNECTED', isConnected);\n    });\n    WebSocketService.on('error', error => {\n      commit('SET_ERROR', error);\n    });\n    WebSocketService.on('nodes', nodes => {\n      commit('SET_NODES', nodes);\n    });\n    WebSocketService.on('node_added', node => {\n      commit('ADD_NODE', node);\n    });\n    WebSocketService.on('node_updated', update => {\n      commit('UPDATE_NODE', update);\n    });\n    WebSocketService.on('node_removed', id => {\n      commit('REMOVE_NODE', id);\n    });\n    WebSocketService.on('connections', connections => {\n      commit('SET_CONNECTIONS', connections);\n    });\n    WebSocketService.on('connection_added', connection => {\n      commit('ADD_CONNECTION', connection);\n    });\n    WebSocketService.on('connection_removed', connection => {\n      commit('REMOVE_CONNECTION', connection);\n    });\n  },\n  disconnect({\n    commit\n  }) {\n    WebSocketService.disconnect();\n    commit('SET_CONNECTED', false);\n  },\n  addNode({\n    commit\n  }, node) {\n    WebSocketService.send('add_node', node);\n  },\n  updateNode({\n    commit\n  }, update) {\n    WebSocketService.send('update_node', update);\n  },\n  removeNode({\n    commit\n  }, id) {\n    WebSocketService.send('remove_node', id);\n  },\n  addConnection({\n    commit\n  }, connection) {\n    WebSocketService.send('add_connection', connection);\n  },\n  removeConnection({\n    commit\n  }, connection) {\n    WebSocketService.send('remove_connection', connection);\n  },\n  selectNode({\n    commit\n  }, node) {\n    commit('SET_SELECTED_NODE', node);\n  }\n};\nconst getters = {\n  getNodeById: state => id => state.nodes.find(n => n.id === id),\n  getConnectionsByNodeId: state => id => state.connections.filter(c => c.from.id === id || c.to.id === id),\n  isConnected: state => state.isConnected,\n  selectedNode: state => state.selectedNode,\n  error: state => state.error\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["WebSocketService","state","nodes","connections","selectedNode","isConnected","error","mutations","SET_NODES","ADD_NODE","node","push","UPDATE_NODE","id","updates","find","n","Object","assign","REMOVE_NODE","filter","SET_CONNECTIONS","ADD_CONNECTION","connection","REMOVE_CONNECTION","fromId","toId","c","from","to","SET_SELECTED_NODE","SET_CONNECTED","SET_ERROR","actions","connect","commit","on","update","disconnect","addNode","send","updateNode","removeNode","addConnection","removeConnection","selectNode","getters","getNodeById","getConnectionsByNodeId","namespaced"],"sources":["/workspace/Smolitux-Suite/src/store/modules/network.js"],"sourcesContent":["import WebSocketService from '@/services/WebSocketService'\n\nconst state = {\n  nodes: [],\n  connections: [],\n  selectedNode: null,\n  isConnected: false,\n  error: null\n}\n\nconst mutations = {\n  SET_NODES(state, nodes) {\n    state.nodes = nodes\n  },\n  ADD_NODE(state, node) {\n    state.nodes.push(node)\n  },\n  UPDATE_NODE(state, { id, updates }) {\n    const node = state.nodes.find(n => n.id === id)\n    if (node) {\n      Object.assign(node, updates)\n    }\n  },\n  REMOVE_NODE(state, id) {\n    state.nodes = state.nodes.filter(n => n.id !== id)\n  },\n  SET_CONNECTIONS(state, connections) {\n    state.connections = connections\n  },\n  ADD_CONNECTION(state, connection) {\n    state.connections.push(connection)\n  },\n  REMOVE_CONNECTION(state, { fromId, toId }) {\n    state.connections = state.connections.filter(c => \n      !(c.from.id === fromId && c.to.id === toId)\n    )\n  },\n  SET_SELECTED_NODE(state, node) {\n    state.selectedNode = node\n  },\n  SET_CONNECTED(state, isConnected) {\n    state.isConnected = isConnected\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nconst actions = {\n  connect({ commit }) {\n    WebSocketService.connect()\n    WebSocketService.on('connected', isConnected => {\n      commit('SET_CONNECTED', isConnected)\n    })\n    WebSocketService.on('error', error => {\n      commit('SET_ERROR', error)\n    })\n    WebSocketService.on('nodes', nodes => {\n      commit('SET_NODES', nodes)\n    })\n    WebSocketService.on('node_added', node => {\n      commit('ADD_NODE', node)\n    })\n    WebSocketService.on('node_updated', update => {\n      commit('UPDATE_NODE', update)\n    })\n    WebSocketService.on('node_removed', id => {\n      commit('REMOVE_NODE', id)\n    })\n    WebSocketService.on('connections', connections => {\n      commit('SET_CONNECTIONS', connections)\n    })\n    WebSocketService.on('connection_added', connection => {\n      commit('ADD_CONNECTION', connection)\n    })\n    WebSocketService.on('connection_removed', connection => {\n      commit('REMOVE_CONNECTION', connection)\n    })\n  },\n  disconnect({ commit }) {\n    WebSocketService.disconnect()\n    commit('SET_CONNECTED', false)\n  },\n  addNode({ commit }, node) {\n    WebSocketService.send('add_node', node)\n  },\n  updateNode({ commit }, update) {\n    WebSocketService.send('update_node', update)\n  },\n  removeNode({ commit }, id) {\n    WebSocketService.send('remove_node', id)\n  },\n  addConnection({ commit }, connection) {\n    WebSocketService.send('add_connection', connection)\n  },\n  removeConnection({ commit }, connection) {\n    WebSocketService.send('remove_connection', connection)\n  },\n  selectNode({ commit }, node) {\n    commit('SET_SELECTED_NODE', node)\n  }\n}\n\nconst getters = {\n  getNodeById: state => id => state.nodes.find(n => n.id === id),\n  getConnectionsByNodeId: state => id => state.connections.filter(c => \n    c.from.id === id || c.to.id === id\n  ),\n  isConnected: state => state.isConnected,\n  selectedNode: state => state.selectedNode,\n  error: state => state.error\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}