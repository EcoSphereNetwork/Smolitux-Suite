{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect(url = 'ws://localhost:8080') {\n    this.socket = new WebSocket(url);\n    this.socket.onopen = () => {\n      this.emit('connected', true);\n    };\n    this.socket.onclose = () => {\n      this.emit('connected', false);\n    };\n    this.socket.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.emit(data.type, data.payload);\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n      this.emit('error', error);\n    };\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  send(type, payload) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n    this.socket.send(JSON.stringify({\n      type,\n      payload\n    }));\n  }\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n  }\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n    }\n  }\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["WebSocketService","constructor","socket","listeners","Map","connect","url","WebSocket","onopen","emit","onclose","onmessage","event","data","JSON","parse","type","payload","error","console","onerror","disconnect","close","send","readyState","OPEN","stringify","on","callback","has","set","Set","get","add","off","delete","forEach"],"sources":["/workspace/Smolitux-Suite/src/services/WebSocketService.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.socket = null\n    this.listeners = new Map()\n  }\n\n  connect(url = 'ws://localhost:8080') {\n    this.socket = new WebSocket(url)\n\n    this.socket.onopen = () => {\n      this.emit('connected', true)\n    }\n\n    this.socket.onclose = () => {\n      this.emit('connected', false)\n    }\n\n    this.socket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data)\n        this.emit(data.type, data.payload)\n      } catch (error) {\n        console.error('WebSocket message error:', error)\n      }\n    }\n\n    this.socket.onerror = (error) => {\n      console.error('WebSocket error:', error)\n      this.emit('error', error)\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close()\n      this.socket = null\n    }\n  }\n\n  send(type, payload) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected')\n      return\n    }\n\n    this.socket.send(JSON.stringify({ type, payload }))\n  }\n\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set())\n    }\n    this.listeners.get(event).add(callback)\n  }\n\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback)\n    }\n  }\n\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data))\n    }\n  }\n}\n\nexport default new WebSocketService()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}