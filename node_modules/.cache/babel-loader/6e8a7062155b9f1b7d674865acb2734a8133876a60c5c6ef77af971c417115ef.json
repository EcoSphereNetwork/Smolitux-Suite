{"ast":null,"code":"export default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\"\n  },\n  props: {\n    checked: {\n      type: [Array, Boolean],\n      description: \"Whether checkbox is checked\"\n    },\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\"\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox should be inline with other checkboxes\"\n    }\n  },\n  data() {\n    return {\n      cbId: \"\",\n      touched: false\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n        this.$emit(\"input\", check);\n      }\n    },\n    inlineClass() {\n      return this.inline ? \"form-check-inline\" : \"\";\n    }\n  },\n  created() {\n    this.cbId = Math.random().toString(16).slice(2);\n  }\n};","map":{"version":3,"names":["name","model","prop","props","checked","type","Array","Boolean","description","disabled","inline","data","cbId","touched","computed","get","set","check","$emit","inlineClass","created","Math","random","toString","slice"],"sources":["/workspace/Smolitux-Suite/src/components/BaseCheckbox.vue"],"sourcesContent":["<template>\n  <div class=\"form-check\" :class=\"[{ disabled: disabled }, inlineClass]\">\n    <label :for=\"cbId\" class=\"form-check-label\">\n      <input\n        :id=\"cbId\"\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        :disabled=\"disabled\"\n        v-model=\"model\"\n      />\n      <span class=\"form-check-sign\"></span>\n      <slot>\n        <span v-if=\"inline\">&nbsp;</span>\n      </slot>\n    </label>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\",\n  },\n  props: {\n    checked: {\n      type: [Array, Boolean],\n      description: \"Whether checkbox is checked\",\n    },\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\",\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox should be inline with other checkboxes\",\n    },\n  },\n  data() {\n    return {\n      cbId: \"\",\n      touched: false,\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n        this.$emit(\"input\", check);\n      },\n    },\n    inlineClass() {\n      return this.inline ? \"form-check-inline\" : \"\";\n    },\n  },\n  created() {\n    this.cbId = Math.random().toString(16).slice(2);\n  },\n};\n</script>\n"],"mappings":"AAkBA,eAAe;EACbA,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE;IACLC,IAAI,EAAE;EACR,CAAC;EACDC,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;MACtBC,WAAW,EAAE;IACf,CAAC;IACDC,QAAQ,EAAE;MACRJ,IAAI,EAAEE,OAAO;MACbC,WAAW,EAAE;IACf,CAAC;IACDE,MAAM,EAAE;MACNL,IAAI,EAAEE,OAAO;MACbC,WAAW,EAAE;IACf;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRb,KAAK,EAAE;MACLc,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACX,OAAO;MACrB,CAAC;MACDY,GAAGA,CAACC,KAAK,EAAE;QACT,IAAI,CAAC,IAAI,CAACJ,OAAO,EAAE;UACjB,IAAI,CAACA,OAAM,GAAI,IAAI;QACrB;QACA,IAAI,CAACK,KAAK,CAAC,OAAO,EAAED,KAAK,CAAC;MAC5B;IACF,CAAC;IACDE,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACT,MAAK,GAAI,mBAAkB,GAAI,EAAE;IAC/C;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR,IAAI,CAACR,IAAG,GAAIS,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}