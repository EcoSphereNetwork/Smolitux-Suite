{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, vModelSelect as _vModelSelect } from \"vue\";\nconst _hoisted_1 = {\n  class: \"suite-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"mini-chat\"\n};\nconst _hoisted_3 = {\n  class: \"chat-header\"\n};\nconst _hoisted_4 = {\n  class: \"chat-messages\",\n  ref: \"messages\"\n};\nconst _hoisted_5 = {\n  class: \"chat-input\"\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = {\n  key: 1,\n  class: \"config-panel\"\n};\nconst _hoisted_8 = {\n  class: \"config-header\"\n};\nconst _hoisted_9 = {\n  class: \"config-content\"\n};\nconst _hoisted_10 = {\n  class: \"config-item\"\n};\nconst _hoisted_11 = {\n  class: \"config-item\"\n};\nconst _hoisted_12 = {\n  class: \"config-item\"\n};\nconst _hoisted_13 = {\n  class: \"config-actions\"\n};\nconst _hoisted_14 = {\n  key: 2,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_smolitux_animation = _resolveComponent(\"smolitux-animation\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_smolitux_animation, {\n    ref: \"animation\",\n    class: \"network-visualization\",\n    onConfigureNode: _cache[0] || (_cache[0] = $event => _ctx.selectedNode = $event)\n  }, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"connection-status\", {\n      connected: _ctx.isConnected\n    }])\n  }, _toDisplayString(_ctx.isConnected ? 'Connected' : 'Disconnected'), 3 /* TEXT, CLASS */), _ctx.selectedNode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createTextVNode(_toDisplayString(_ctx.selectedNode.label) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.selectedNode = null)\n  }, \"×\")]), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedNode.messages, (msg, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: i,\n      class: \"message\"\n    }, _toDisplayString(msg), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.newMessage = $event),\n    onKeyup: _cache[3] || (_cache[3] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Type a message...\",\n    disabled: !_ctx.isConnected || _ctx.selectedNode.status !== 'active'\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), [[_vModelText, $data.newMessage]])])])) : _createCommentVNode(\"v-if\", true), _ctx.selectedNode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createTextVNode(\" Configuration: \" + _toDisplayString(_ctx.selectedNode.label) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.selectedNode = null)\n  }, \"×\")]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", null, \"Label:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.selectedNode.label = $event),\n    onChange: _cache[6] || (_cache[6] = (...args) => $options.updateSelectedNode && $options.updateSelectedNode(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, _ctx.selectedNode.label]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", null, \"Type:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.selectedNode.type = $event),\n    onChange: _cache[8] || (_cache[8] = (...args) => $options.updateSelectedNode && $options.updateSelectedNode(...args))\n  }, _cache[13] || (_cache[13] = [_createElementVNode(\"option\", {\n    value: \"chatbot\"\n  }, \"Chatbot\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"llm\"\n  }, \"LLM Server\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"database\"\n  }, \"Database\", -1 /* HOISTED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedNode.type]])]), _createElementVNode(\"div\", _hoisted_12, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", null, \"Status:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => _ctx.selectedNode.status = $event),\n    onChange: _cache[10] || (_cache[10] = (...args) => $options.updateSelectedNode && $options.updateSelectedNode(...args))\n  }, _cache[15] || (_cache[15] = [_createElementVNode(\"option\", {\n    value: \"active\"\n  }, \"Active\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"inactive\"\n  }, \"Inactive\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"error\"\n  }, \"Error\", -1 /* HOISTED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedNode.status]])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    class: \"danger\",\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.removeSelectedNode && $options.removeSelectedNode(...args))\n  }, \"Delete Node\")])])])) : _createCommentVNode(\"v-if\", true), _ctx.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _toDisplayString(_ctx.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createVNode","_component_smolitux_animation","onConfigureNode","_cache","$event","_ctx","selectedNode","_createElementVNode","_normalizeClass","connected","isConnected","_hoisted_2","_hoisted_3","_createTextVNode","_toDisplayString","label","onClick","_hoisted_4","_Fragment","_renderList","messages","msg","i","_hoisted_5","$data","newMessage","onKeyup","_withKeys","args","$options","sendMessage","placeholder","disabled","status","_hoisted_6","_createCommentVNode","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","onChange","updateSelectedNode","_hoisted_11","type","value","_hoisted_12","_hoisted_13","removeSelectedNode","error","_hoisted_14"],"sources":["/workspace/Smolitux-Suite/src/views/Suite.vue"],"sourcesContent":["<template>\n  <div class=\"suite-container\">\n    <smolitux-animation\n      ref=\"animation\"\n      class=\"network-visualization\"\n      @configure-node=\"selectedNode = $event\"\n    />\n    <div class=\"connection-status\" :class=\"{ connected: isConnected }\">\n      {{ isConnected ? 'Connected' : 'Disconnected' }}\n    </div>\n    <div class=\"mini-chat\" v-if=\"selectedNode\">\n      <div class=\"chat-header\">\n        {{ selectedNode.label }}\n        <button @click=\"selectedNode = null\">×</button>\n      </div>\n      <div class=\"chat-messages\" ref=\"messages\">\n        <div v-for=\"(msg, i) in selectedNode.messages\" :key=\"i\" class=\"message\">\n          {{ msg }}\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <input \n          v-model=\"newMessage\" \n          @keyup.enter=\"sendMessage\" \n          placeholder=\"Type a message...\"\n          :disabled=\"!isConnected || selectedNode.status !== 'active'\"\n        >\n      </div>\n    </div>\n    <div class=\"config-panel\" v-if=\"selectedNode\">\n      <div class=\"config-header\">\n        Configuration: {{ selectedNode.label }}\n        <button @click=\"selectedNode = null\">×</button>\n      </div>\n      <div class=\"config-content\">\n        <div class=\"config-item\">\n          <label>Label:</label>\n          <input v-model=\"selectedNode.label\" @change=\"updateSelectedNode\">\n        </div>\n        <div class=\"config-item\">\n          <label>Type:</label>\n          <select v-model=\"selectedNode.type\" @change=\"updateSelectedNode\">\n            <option value=\"chatbot\">Chatbot</option>\n            <option value=\"llm\">LLM Server</option>\n            <option value=\"database\">Database</option>\n          </select>\n        </div>\n        <div class=\"config-item\">\n          <label>Status:</label>\n          <select v-model=\"selectedNode.status\" @change=\"updateSelectedNode\">\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n            <option value=\"error\">Error</option>\n          </select>\n        </div>\n        <div class=\"config-actions\">\n          <button class=\"danger\" @click=\"removeSelectedNode\">Delete Node</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"error-message\" v-if=\"error\">\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport SmolituxAnimation from '@/components/Smolitux/Canvas/Animation.vue'\n\nexport default {\n  name: 'Suite',\n  components: {\n    SmolituxAnimation\n  },\n  data() {\n    return {\n      newMessage: ''\n    }\n  },\n  computed: {\n    ...mapState('network', ['selectedNode', 'error']),\n    ...mapGetters('network', ['isConnected'])\n  },\n  watch: {\n    'selectedNode.messages': {\n      handler() {\n        this.$nextTick(() => {\n          if (this.$refs.messages) {\n            this.$refs.messages.scrollTop = this.$refs.messages.scrollHeight\n          }\n        })\n      },\n      deep: true\n    }\n  },\n  methods: {\n    ...mapActions('network', [\n      'updateNode',\n      'removeNode'\n    ]),\n    updateSelectedNode() {\n      if (!this.selectedNode) return\n      this.updateNode({\n        id: this.selectedNode.id,\n        updates: {\n          label: this.selectedNode.label,\n          type: this.selectedNode.type,\n          status: this.selectedNode.status\n        }\n      })\n    },\n    removeSelectedNode() {\n      if (!this.selectedNode) return\n      this.removeNode(this.selectedNode.id)\n      this.selectedNode = null\n    },\n    sendMessage() {\n      if (!this.newMessage.trim() || !this.selectedNode) return\n      if (!this.selectedNode.messages) {\n        this.$set(this.selectedNode, 'messages', [])\n      }\n      this.selectedNode.messages.push(this.newMessage)\n      this.updateSelectedNode()\n      this.newMessage = ''\n    }\n  }\n}\n</script>\n\n<style scoped>\n.suite-container {\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  background: #1e1e1e;\n}\n\n.network-visualization {\n  width: 100%;\n  height: 100%;\n}\n\n.connection-status {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  padding: 8px 16px;\n  border-radius: 4px;\n  background: #e74c3c;\n  color: white;\n}\n\n.connection-status.connected {\n  background: #2ecc71;\n}\n\n.mini-chat {\n  position: absolute;\n  right: 20px;\n  bottom: 20px;\n  width: 300px;\n  height: 400px;\n  background: #fff;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.chat-header {\n  padding: 10px;\n  background: #42b983;\n  color: white;\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.message {\n  margin-bottom: 8px;\n  padding: 8px;\n  background: #f8f9fa;\n  border-radius: 4px;\n}\n\n.chat-input {\n  padding: 10px;\n  border-top: 1px solid #eee;\n}\n\n.chat-input input {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.chat-input input:disabled {\n  background: #f8f9fa;\n  cursor: not-allowed;\n}\n\n.config-panel {\n  position: absolute;\n  right: 340px;\n  bottom: 20px;\n  width: 300px;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.config-header {\n  padding: 10px;\n  background: #42b983;\n  color: white;\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n}\n\n.config-content {\n  padding: 10px;\n}\n\n.config-item {\n  margin-bottom: 10px;\n}\n\n.config-item label {\n  display: block;\n  margin-bottom: 5px;\n  color: #2c3e50;\n}\n\n.config-item input,\n.config-item select {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.config-actions {\n  margin-top: 20px;\n  padding-top: 10px;\n  border-top: 1px solid #eee;\n}\n\nbutton {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: #42b983;\n  color: white;\n}\n\nbutton.danger {\n  background: #e74c3c;\n}\n\n.error-message {\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  padding: 10px;\n  background: #e74c3c;\n  color: white;\n  border-radius: 4px;\n  max-width: 300px;\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}