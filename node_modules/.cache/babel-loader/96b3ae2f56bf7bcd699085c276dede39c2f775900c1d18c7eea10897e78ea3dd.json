{"ast":null,"code":"import { mapState, mapActions } from 'vuex';\nimport SmolituxCanvas from './Canvas.vue';\nexport default {\n  name: 'SmolituxAnimation',\n  components: {\n    SmolituxCanvas\n  },\n  data() {\n    return {\n      isRunning: false,\n      animationLoop: null,\n      fps: 30,\n      draggedNode: null,\n      scale: 1,\n      offset: {\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  computed: {\n    ...mapState('network', ['nodes', 'connections', 'selectedNode'])\n  },\n  mounted() {\n    this.start();\n    this.connect();\n  },\n  beforeDestroy() {\n    this.stop();\n    this.disconnect();\n  },\n  methods: {\n    ...mapActions('network', ['connect', 'disconnect', 'addNode', 'updateNode', 'removeNode', 'addConnection', 'removeConnection', 'selectNode']),\n    start() {\n      if (this.isRunning) return;\n      this.isRunning = true;\n      this.animationLoop = setInterval(this.draw, 1000 / this.fps);\n    },\n    stop() {\n      if (!this.isRunning) return;\n      this.isRunning = false;\n      if (this.animationLoop) {\n        clearInterval(this.animationLoop);\n        this.animationLoop = null;\n      }\n    },\n    draw() {\n      const canvas = this.$refs.canvas;\n      if (!canvas) return;\n      const ctx = canvas.$refs.canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.$refs.canvas.width, canvas.$refs.canvas.height);\n\n      // Apply transformations\n      ctx.save();\n      ctx.translate(this.offset.x, this.offset.y);\n      ctx.scale(this.scale, this.scale);\n\n      // Draw connections\n      this.connections.forEach(connection => {\n        this.drawConnection(ctx, connection);\n      });\n\n      // Draw nodes\n      this.nodes.forEach(node => {\n        this.drawNode(ctx, node);\n      });\n      ctx.restore();\n    },\n    drawNode(ctx, node) {\n      const radius = node.radius || 20;\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI);\n\n      // Different colors for different node types\n      switch (node.type) {\n        case 'chatbot':\n          ctx.fillStyle = '#42b983';\n          break;\n        case 'llm':\n          ctx.fillStyle = '#3498db';\n          break;\n        case 'database':\n          ctx.fillStyle = '#e74c3c';\n          break;\n        default:\n          ctx.fillStyle = '#95a5a6';\n      }\n\n      // Highlight selected node\n      if (this.selectedNode && this.selectedNode.id === node.id) {\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = '#f1c40f';\n      } else {\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#2c3e50';\n      }\n      ctx.fill();\n      ctx.stroke();\n      if (node.label) {\n        ctx.fillStyle = '#2c3e50';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.font = '12px Arial';\n        ctx.fillText(node.label, node.x, node.y);\n      }\n\n      // Draw status indicator\n      const statusColors = {\n        active: '#2ecc71',\n        inactive: '#95a5a6',\n        error: '#e74c3c'\n      };\n      if (node.status && statusColors[node.status]) {\n        ctx.beginPath();\n        ctx.arc(node.x + radius - 5, node.y - radius + 5, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = statusColors[node.status];\n        ctx.fill();\n      }\n    },\n    drawConnection(ctx, connection) {\n      const fromNode = this.nodes.find(n => n.id === connection.from.id);\n      const toNode = this.nodes.find(n => n.id === connection.to.id);\n      if (!fromNode || !toNode) return;\n      ctx.beginPath();\n      ctx.moveTo(fromNode.x, fromNode.y);\n      ctx.lineTo(toNode.x, toNode.y);\n      ctx.strokeStyle = connection.color || '#95a5a6';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw arrow\n      const angle = Math.atan2(toNode.y - fromNode.y, toNode.x - fromNode.x);\n      const radius = toNode.radius || 20;\n      const arrowLength = 15;\n      const arrowWidth = 8;\n      const endX = toNode.x - radius * Math.cos(angle);\n      const endY = toNode.y - radius * Math.sin(angle);\n      ctx.beginPath();\n      ctx.moveTo(endX, endY);\n      ctx.lineTo(endX - arrowLength * Math.cos(angle - Math.PI / 6), endY - arrowLength * Math.sin(angle - Math.PI / 6));\n      ctx.lineTo(endX - arrowLength * Math.cos(angle + Math.PI / 6), endY - arrowLength * Math.sin(angle + Math.PI / 6));\n      ctx.closePath();\n      ctx.fillStyle = connection.color || '#95a5a6';\n      ctx.fill();\n    },\n    onMouseWheel(event) {\n      event.preventDefault();\n      const delta = event.deltaY > 0 ? 0.9 : 1.1;\n      this.scale *= delta;\n    },\n    onMouseDown(event) {\n      const canvas = this.$refs.canvas.$refs.canvas;\n      const rect = canvas.getBoundingClientRect();\n      const x = (event.clientX - rect.left - this.offset.x) / this.scale;\n      const y = (event.clientY - rect.top - this.offset.y) / this.scale;\n\n      // Check if clicked on a node\n      const clickedNode = this.nodes.find(node => {\n        const dx = node.x - x;\n        const dy = node.y - y;\n        return Math.sqrt(dx * dx + dy * dy) < (node.radius || 20);\n      });\n      if (clickedNode) {\n        this.draggedNode = clickedNode;\n        this.selectNode(clickedNode);\n      } else {\n        // Start panning\n        this.draggedNode = null;\n        this.selectNode(null);\n        canvas.style.cursor = 'grabbing';\n      }\n    },\n    onMouseUp(event) {\n      this.draggedNode = null;\n      this.$refs.canvas.$refs.canvas.style.cursor = 'default';\n    },\n    onMouseMove(event) {\n      if (!this.draggedNode) return;\n      const movementX = event.movementX / this.scale;\n      const movementY = event.movementY / this.scale;\n      this.updateNode({\n        id: this.draggedNode.id,\n        updates: {\n          x: this.draggedNode.x + movementX,\n          y: this.draggedNode.y + movementY\n        }\n      });\n    },\n    onMouseClick(event) {\n      // Handled in onMouseDown for better UX\n    },\n    onDoubleClick(event) {\n      if (this.selectedNode) {\n        // Open configuration panel (handled by parent)\n        this.$emit('configure-node', this.selectedNode);\n      } else {\n        // Create new node at click position\n        const canvas = this.$refs.canvas.$refs.canvas;\n        const rect = canvas.getBoundingClientRect();\n        const x = (event.clientX - rect.left - this.offset.x) / this.scale;\n        const y = (event.clientY - rect.top - this.offset.y) / this.scale;\n        this.addNode({\n          id: Date.now(),\n          label: 'New Node',\n          type: 'chatbot',\n          x,\n          y,\n          status: 'inactive'\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","SmolituxCanvas","name","components","data","isRunning","animationLoop","fps","draggedNode","scale","offset","x","y","computed","mounted","start","connect","beforeDestroy","stop","disconnect","methods","setInterval","draw","clearInterval","canvas","$refs","ctx","getContext","clearRect","width","height","save","translate","connections","forEach","connection","drawConnection","nodes","node","drawNode","restore","radius","beginPath","arc","Math","PI","type","fillStyle","selectedNode","id","lineWidth","strokeStyle","fill","stroke","label","textAlign","textBaseline","font","fillText","statusColors","active","inactive","error","status","fromNode","find","n","from","toNode","to","moveTo","lineTo","color","angle","atan2","arrowLength","arrowWidth","endX","cos","endY","sin","closePath","onMouseWheel","event","preventDefault","delta","deltaY","onMouseDown","rect","getBoundingClientRect","clientX","left","clientY","top","clickedNode","dx","dy","sqrt","selectNode","style","cursor","onMouseUp","onMouseMove","movementX","movementY","updateNode","updates","onMouseClick","onDoubleClick","$emit","addNode","Date","now"],"sources":["/workspace/Smolitux-Suite/src/components/Smolitux/Canvas/Animation.vue"],"sourcesContent":["<template>\n  <div class=\"animation-container\">\n    <smolitux-canvas\n      ref=\"canvas\"\n      @mouse-wheel=\"onMouseWheel\"\n      @mouse-down=\"onMouseDown\"\n      @mouse-up=\"onMouseUp\"\n      @mouse-move=\"onMouseMove\"\n      @mouse-click=\"onMouseClick\"\n      @double-click=\"onDoubleClick\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport SmolituxCanvas from './Canvas.vue'\n\nexport default {\n  name: 'SmolituxAnimation',\n  components: {\n    SmolituxCanvas\n  },\n  data() {\n    return {\n      isRunning: false,\n      animationLoop: null,\n      fps: 30,\n      draggedNode: null,\n      scale: 1,\n      offset: { x: 0, y: 0 }\n    }\n  },\n  computed: {\n    ...mapState('network', ['nodes', 'connections', 'selectedNode'])\n  },\n  mounted() {\n    this.start()\n    this.connect()\n  },\n  beforeDestroy() {\n    this.stop()\n    this.disconnect()\n  },\n  methods: {\n    ...mapActions('network', [\n      'connect',\n      'disconnect',\n      'addNode',\n      'updateNode',\n      'removeNode',\n      'addConnection',\n      'removeConnection',\n      'selectNode'\n    ]),\n    start() {\n      if (this.isRunning) return\n      this.isRunning = true\n      this.animationLoop = setInterval(this.draw, 1000 / this.fps)\n    },\n    stop() {\n      if (!this.isRunning) return\n      this.isRunning = false\n      if (this.animationLoop) {\n        clearInterval(this.animationLoop)\n        this.animationLoop = null\n      }\n    },\n    draw() {\n      const canvas = this.$refs.canvas\n      if (!canvas) return\n\n      const ctx = canvas.$refs.canvas.getContext('2d')\n      ctx.clearRect(0, 0, canvas.$refs.canvas.width, canvas.$refs.canvas.height)\n\n      // Apply transformations\n      ctx.save()\n      ctx.translate(this.offset.x, this.offset.y)\n      ctx.scale(this.scale, this.scale)\n\n      // Draw connections\n      this.connections.forEach(connection => {\n        this.drawConnection(ctx, connection)\n      })\n\n      // Draw nodes\n      this.nodes.forEach(node => {\n        this.drawNode(ctx, node)\n      })\n\n      ctx.restore()\n    },\n    drawNode(ctx, node) {\n      const radius = node.radius || 20\n      ctx.beginPath()\n      ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI)\n      \n      // Different colors for different node types\n      switch (node.type) {\n        case 'chatbot':\n          ctx.fillStyle = '#42b983'\n          break\n        case 'llm':\n          ctx.fillStyle = '#3498db'\n          break\n        case 'database':\n          ctx.fillStyle = '#e74c3c'\n          break\n        default:\n          ctx.fillStyle = '#95a5a6'\n      }\n\n      // Highlight selected node\n      if (this.selectedNode && this.selectedNode.id === node.id) {\n        ctx.lineWidth = 3\n        ctx.strokeStyle = '#f1c40f'\n      } else {\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#2c3e50'\n      }\n\n      ctx.fill()\n      ctx.stroke()\n\n      if (node.label) {\n        ctx.fillStyle = '#2c3e50'\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.font = '12px Arial'\n        ctx.fillText(node.label, node.x, node.y)\n      }\n\n      // Draw status indicator\n      const statusColors = {\n        active: '#2ecc71',\n        inactive: '#95a5a6',\n        error: '#e74c3c'\n      }\n      if (node.status && statusColors[node.status]) {\n        ctx.beginPath()\n        ctx.arc(node.x + radius - 5, node.y - radius + 5, 5, 0, 2 * Math.PI)\n        ctx.fillStyle = statusColors[node.status]\n        ctx.fill()\n      }\n    },\n    drawConnection(ctx, connection) {\n      const fromNode = this.nodes.find(n => n.id === connection.from.id)\n      const toNode = this.nodes.find(n => n.id === connection.to.id)\n      if (!fromNode || !toNode) return\n\n      ctx.beginPath()\n      ctx.moveTo(fromNode.x, fromNode.y)\n      ctx.lineTo(toNode.x, toNode.y)\n      ctx.strokeStyle = connection.color || '#95a5a6'\n      ctx.lineWidth = 2\n      ctx.stroke()\n\n      // Draw arrow\n      const angle = Math.atan2(toNode.y - fromNode.y, toNode.x - fromNode.x)\n      const radius = toNode.radius || 20\n      const arrowLength = 15\n      const arrowWidth = 8\n\n      const endX = toNode.x - (radius * Math.cos(angle))\n      const endY = toNode.y - (radius * Math.sin(angle))\n\n      ctx.beginPath()\n      ctx.moveTo(endX, endY)\n      ctx.lineTo(\n        endX - arrowLength * Math.cos(angle - Math.PI/6),\n        endY - arrowLength * Math.sin(angle - Math.PI/6)\n      )\n      ctx.lineTo(\n        endX - arrowLength * Math.cos(angle + Math.PI/6),\n        endY - arrowLength * Math.sin(angle + Math.PI/6)\n      )\n      ctx.closePath()\n      ctx.fillStyle = connection.color || '#95a5a6'\n      ctx.fill()\n    },\n    onMouseWheel(event) {\n      event.preventDefault()\n      const delta = event.deltaY > 0 ? 0.9 : 1.1\n      this.scale *= delta\n    },\n    onMouseDown(event) {\n      const canvas = this.$refs.canvas.$refs.canvas\n      const rect = canvas.getBoundingClientRect()\n      const x = (event.clientX - rect.left - this.offset.x) / this.scale\n      const y = (event.clientY - rect.top - this.offset.y) / this.scale\n\n      // Check if clicked on a node\n      const clickedNode = this.nodes.find(node => {\n        const dx = node.x - x\n        const dy = node.y - y\n        return Math.sqrt(dx * dx + dy * dy) < (node.radius || 20)\n      })\n\n      if (clickedNode) {\n        this.draggedNode = clickedNode\n        this.selectNode(clickedNode)\n      } else {\n        // Start panning\n        this.draggedNode = null\n        this.selectNode(null)\n        canvas.style.cursor = 'grabbing'\n      }\n    },\n    onMouseUp(event) {\n      this.draggedNode = null\n      this.$refs.canvas.$refs.canvas.style.cursor = 'default'\n    },\n    onMouseMove(event) {\n      if (!this.draggedNode) return\n\n      const movementX = event.movementX / this.scale\n      const movementY = event.movementY / this.scale\n\n      this.updateNode({\n        id: this.draggedNode.id,\n        updates: {\n          x: this.draggedNode.x + movementX,\n          y: this.draggedNode.y + movementY\n        }\n      })\n    },\n    onMouseClick(event) {\n      // Handled in onMouseDown for better UX\n    },\n    onDoubleClick(event) {\n      if (this.selectedNode) {\n        // Open configuration panel (handled by parent)\n        this.$emit('configure-node', this.selectedNode)\n      } else {\n        // Create new node at click position\n        const canvas = this.$refs.canvas.$refs.canvas\n        const rect = canvas.getBoundingClientRect()\n        const x = (event.clientX - rect.left - this.offset.x) / this.scale\n        const y = (event.clientY - rect.top - this.offset.y) / this.scale\n\n        this.addNode({\n          id: Date.now(),\n          label: 'New Node',\n          type: 'chatbot',\n          x,\n          y,\n          status: 'inactive'\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.animation-container {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}