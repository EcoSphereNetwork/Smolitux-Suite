{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nimport SmolituxAnimation from '@/components/Smolitux/Canvas/Animation.vue';\nexport default {\n  name: 'Suite',\n  components: {\n    SmolituxAnimation\n  },\n  data() {\n    return {\n      newMessage: ''\n    };\n  },\n  computed: {\n    ...mapState('network', ['selectedNode', 'error']),\n    ...mapGetters('network', ['isConnected'])\n  },\n  watch: {\n    'selectedNode.messages': {\n      handler() {\n        this.$nextTick(() => {\n          if (this.$refs.messages) {\n            this.$refs.messages.scrollTop = this.$refs.messages.scrollHeight;\n          }\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n    ...mapActions('network', ['updateNode', 'removeNode']),\n    updateSelectedNode() {\n      if (!this.selectedNode) return;\n      this.updateNode({\n        id: this.selectedNode.id,\n        updates: {\n          label: this.selectedNode.label,\n          type: this.selectedNode.type,\n          status: this.selectedNode.status\n        }\n      });\n    },\n    removeSelectedNode() {\n      if (!this.selectedNode) return;\n      this.removeNode(this.selectedNode.id);\n      this.selectedNode = null;\n    },\n    sendMessage() {\n      if (!this.newMessage.trim() || !this.selectedNode) return;\n      if (!this.selectedNode.messages) {\n        this.$set(this.selectedNode, 'messages', []);\n      }\n      this.selectedNode.messages.push(this.newMessage);\n      this.updateSelectedNode();\n      this.newMessage = '';\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","SmolituxAnimation","name","components","data","newMessage","computed","watch","handler","$nextTick","$refs","messages","scrollTop","scrollHeight","deep","methods","updateSelectedNode","selectedNode","updateNode","id","updates","label","type","status","removeSelectedNode","removeNode","sendMessage","trim","$set","push"],"sources":["/workspace/Smolitux-Suite/src/views/Suite.vue"],"sourcesContent":["<template>\n  <div class=\"suite-container\">\n    <smolitux-animation\n      ref=\"animation\"\n      class=\"network-visualization\"\n      @configure-node=\"selectedNode = $event\"\n    />\n    <div class=\"connection-status\" :class=\"{ connected: isConnected }\">\n      {{ isConnected ? 'Connected' : 'Disconnected' }}\n    </div>\n    <div class=\"mini-chat\" v-if=\"selectedNode\">\n      <div class=\"chat-header\">\n        {{ selectedNode.label }}\n        <button @click=\"selectedNode = null\">×</button>\n      </div>\n      <div class=\"chat-messages\" ref=\"messages\">\n        <div v-for=\"(msg, i) in selectedNode.messages\" :key=\"i\" class=\"message\">\n          {{ msg }}\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <input \n          v-model=\"newMessage\" \n          @keyup.enter=\"sendMessage\" \n          placeholder=\"Type a message...\"\n          :disabled=\"!isConnected || selectedNode.status !== 'active'\"\n        >\n      </div>\n    </div>\n    <div class=\"config-panel\" v-if=\"selectedNode\">\n      <div class=\"config-header\">\n        Configuration: {{ selectedNode.label }}\n        <button @click=\"selectedNode = null\">×</button>\n      </div>\n      <div class=\"config-content\">\n        <div class=\"config-item\">\n          <label>Label:</label>\n          <input v-model=\"selectedNode.label\" @change=\"updateSelectedNode\">\n        </div>\n        <div class=\"config-item\">\n          <label>Type:</label>\n          <select v-model=\"selectedNode.type\" @change=\"updateSelectedNode\">\n            <option value=\"chatbot\">Chatbot</option>\n            <option value=\"llm\">LLM Server</option>\n            <option value=\"database\">Database</option>\n          </select>\n        </div>\n        <div class=\"config-item\">\n          <label>Status:</label>\n          <select v-model=\"selectedNode.status\" @change=\"updateSelectedNode\">\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n            <option value=\"error\">Error</option>\n          </select>\n        </div>\n        <div class=\"config-actions\">\n          <button class=\"danger\" @click=\"removeSelectedNode\">Delete Node</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"error-message\" v-if=\"error\">\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport SmolituxAnimation from '@/components/Smolitux/Canvas/Animation.vue'\n\nexport default {\n  name: 'Suite',\n  components: {\n    SmolituxAnimation\n  },\n  data() {\n    return {\n      newMessage: ''\n    }\n  },\n  computed: {\n    ...mapState('network', ['selectedNode', 'error']),\n    ...mapGetters('network', ['isConnected'])\n  },\n  watch: {\n    'selectedNode.messages': {\n      handler() {\n        this.$nextTick(() => {\n          if (this.$refs.messages) {\n            this.$refs.messages.scrollTop = this.$refs.messages.scrollHeight\n          }\n        })\n      },\n      deep: true\n    }\n  },\n  methods: {\n    ...mapActions('network', [\n      'updateNode',\n      'removeNode'\n    ]),\n    updateSelectedNode() {\n      if (!this.selectedNode) return\n      this.updateNode({\n        id: this.selectedNode.id,\n        updates: {\n          label: this.selectedNode.label,\n          type: this.selectedNode.type,\n          status: this.selectedNode.status\n        }\n      })\n    },\n    removeSelectedNode() {\n      if (!this.selectedNode) return\n      this.removeNode(this.selectedNode.id)\n      this.selectedNode = null\n    },\n    sendMessage() {\n      if (!this.newMessage.trim() || !this.selectedNode) return\n      if (!this.selectedNode.messages) {\n        this.$set(this.selectedNode, 'messages', [])\n      }\n      this.selectedNode.messages.push(this.newMessage)\n      this.updateSelectedNode()\n      this.newMessage = ''\n    }\n  }\n}\n</script>\n\n<style scoped>\n.suite-container {\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  background: #1e1e1e;\n}\n\n.network-visualization {\n  width: 100%;\n  height: 100%;\n}\n\n.connection-status {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  padding: 8px 16px;\n  border-radius: 4px;\n  background: #e74c3c;\n  color: white;\n}\n\n.connection-status.connected {\n  background: #2ecc71;\n}\n\n.mini-chat {\n  position: absolute;\n  right: 20px;\n  bottom: 20px;\n  width: 300px;\n  height: 400px;\n  background: #fff;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.chat-header {\n  padding: 10px;\n  background: #42b983;\n  color: white;\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.message {\n  margin-bottom: 8px;\n  padding: 8px;\n  background: #f8f9fa;\n  border-radius: 4px;\n}\n\n.chat-input {\n  padding: 10px;\n  border-top: 1px solid #eee;\n}\n\n.chat-input input {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.chat-input input:disabled {\n  background: #f8f9fa;\n  cursor: not-allowed;\n}\n\n.config-panel {\n  position: absolute;\n  right: 340px;\n  bottom: 20px;\n  width: 300px;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.config-header {\n  padding: 10px;\n  background: #42b983;\n  color: white;\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n}\n\n.config-content {\n  padding: 10px;\n}\n\n.config-item {\n  margin-bottom: 10px;\n}\n\n.config-item label {\n  display: block;\n  margin-bottom: 5px;\n  color: #2c3e50;\n}\n\n.config-item input,\n.config-item select {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.config-actions {\n  margin-top: 20px;\n  padding-top: 10px;\n  border-top: 1px solid #eee;\n}\n\nbutton {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: #42b983;\n  color: white;\n}\n\nbutton.danger {\n  background: #e74c3c;\n}\n\n.error-message {\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  padding: 10px;\n  background: #e74c3c;\n  color: white;\n  border-radius: 4px;\n  max-width: 300px;\n}\n</style>\n\n"],"mappings":"AAmEA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,UAAS,QAAS,MAAK;AACtD,OAAOC,iBAAgB,MAAO,4CAA2C;AAEzE,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;IACd;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGR,QAAQ,CAAC,SAAS,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACjD,GAAGC,UAAU,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC;EAC1C,CAAC;EACDQ,KAAK,EAAE;IACL,uBAAuB,EAAE;MACvBC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACC,SAAS,CAAC,MAAM;UACnB,IAAI,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAE;YACvB,IAAI,CAACD,KAAK,CAACC,QAAQ,CAACC,SAAQ,GAAI,IAAI,CAACF,KAAK,CAACC,QAAQ,CAACE,YAAW;UACjE;QACF,CAAC;MACH,CAAC;MACDC,IAAI,EAAE;IACR;EACF,CAAC;EACDC,OAAO,EAAE;IACP,GAAGf,UAAU,CAAC,SAAS,EAAE,CACvB,YAAY,EACZ,YAAW,CACZ,CAAC;IACFgB,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACxB,IAAI,CAACC,UAAU,CAAC;QACdC,EAAE,EAAE,IAAI,CAACF,YAAY,CAACE,EAAE;QACxBC,OAAO,EAAE;UACPC,KAAK,EAAE,IAAI,CAACJ,YAAY,CAACI,KAAK;UAC9BC,IAAI,EAAE,IAAI,CAACL,YAAY,CAACK,IAAI;UAC5BC,MAAM,EAAE,IAAI,CAACN,YAAY,CAACM;QAC5B;MACF,CAAC;IACH,CAAC;IACDC,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACP,YAAY,EAAE;MACxB,IAAI,CAACQ,UAAU,CAAC,IAAI,CAACR,YAAY,CAACE,EAAE;MACpC,IAAI,CAACF,YAAW,GAAI,IAAG;IACzB,CAAC;IACDS,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAACrB,UAAU,CAACsB,IAAI,CAAC,KAAK,CAAC,IAAI,CAACV,YAAY,EAAE;MACnD,IAAI,CAAC,IAAI,CAACA,YAAY,CAACN,QAAQ,EAAE;QAC/B,IAAI,CAACiB,IAAI,CAAC,IAAI,CAACX,YAAY,EAAE,UAAU,EAAE,EAAE;MAC7C;MACA,IAAI,CAACA,YAAY,CAACN,QAAQ,CAACkB,IAAI,CAAC,IAAI,CAACxB,UAAU;MAC/C,IAAI,CAACW,kBAAkB,CAAC;MACxB,IAAI,CAACX,UAAS,GAAI,EAAC;IACrB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}